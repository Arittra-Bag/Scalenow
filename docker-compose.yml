# LinkedIn Knowledge Management System - Docker Compose Configuration
version: '3.8'

services:
  # Main application service
  linkedin-kms:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: linkedin-kms-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - KNOWLEDGE_REPO_PATH=/app/knowledge_repository
      - CACHE_DB_PATH=/app/cache/knowledge_cache.db
      - LOG_FILE_PATH=/app/logs/linkedin_kms.log
      - BACKUP_PATH=/app/backups
      - ENABLE_FILE_LOGGING=true
      - ENABLE_METRICS_COLLECTION=true
      - ENABLE_AUTO_BACKUP=true
      - BACKUP_INTERVAL_HOURS=24
    env_file:
      - .env
    volumes:
      - knowledge_data:/app/knowledge_repository
      - cache_data:/app/cache
      - log_data:/app/logs
      - backup_data:/app/backups
    networks:
      - linkedin-kms-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: linkedin-kms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - linkedin-kms-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: linkedin-kms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - log_data:/var/log/nginx
    networks:
      - linkedin-kms-network
    depends_on:
      - linkedin-kms
    profiles:
      - with-nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: linkedin-kms-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - linkedin-kms-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: linkedin-kms-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - linkedin-kms-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  knowledge_data:
    driver: local
  cache_data:
    driver: local
  log_data:
    driver: local
  backup_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  linkedin-kms-network:
    driver: bridge